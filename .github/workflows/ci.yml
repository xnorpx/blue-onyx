name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
  - cron: '00 01 * * *'
  workflow_dispatch:

permissions:
  # to fetch code (actions/checkout)
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test-cpu:
    name: build-test-cpu
    env:
      RUST_BACKTRACE: 1
      RUSTFLAGS: -C target-cpu=native -D warnings
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: win beta
          os: windows-latest
          rust: beta
        - build: win nightly
          os: windows-latest
          rust: nightly
        - build: win
          os: windows-latest
          rust: stable
        - build: linux beta
          os: ubuntu-latest
          rust: beta
        - build: linux nightly
          os: ubuntu-latest
          rust: nightly
        - build: linux
          os: ubuntu-latest
          rust: stable

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install CUDA 12.8 and cuDNN 9 via apt (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Add NVIDIA's repository
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
        sudo dpkg -i cuda-keyring_1.0-1_all.deb
        sudo apt-get update
        
        # Install CUDA 12.8
        sudo apt-get install -y cuda-toolkit-12-8 cuda-runtime-12-8
        
        # Install cuDNN 9
        sudo apt-get install -y libcudnn9-dev libcudnn9-cuda-12
        
    - name: Set up environment variables
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "CUDA_PATH=/usr/local/cuda-12.8" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CUDNN_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "PATH=/usr/local/cuda-12.8/bin:$PATH" >> $GITHUB_ENV
        
    - name: Verify installations
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "CUDA_PATH: $CUDA_PATH"
        echo "CUDNN_PATH: $CUDNN_PATH"
        nvcc --version
        # Check cuDNN
        find /usr -name "libcudnn*" 2>/dev/null | head -5

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      run: python -m pip install flatbuffers numpy mypy pytest setuptools wheel onnx protobuf sympy psutil onnxscript

    - name: Build release blue-onyx
      run: cargo build --release

  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install CUDA 12.8 and cuDNN 9 via apt (Linux only)
      if: runner.os == 'Linux'
      run: |
        # Add NVIDIA's repository
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
        sudo dpkg -i cuda-keyring_1.0-1_all.deb
        sudo apt-get update
        
        # Install CUDA 12.8
        sudo apt-get install -y cuda-toolkit-12-8 cuda-runtime-12-8
        
        # Install cuDNN 9
        sudo apt-get install -y libcudnn9-dev libcudnn9-cuda-12
        
    - name: Set up environment variables
      if: runner.os == 'Linux'
      run: |
        echo "CUDA_PATH=/usr/local/cuda-12.8" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CUDNN_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "PATH=/usr/local/cuda-12.8/bin:$PATH" >> $GITHUB_ENV
        
    - name: Verify installations
      if: runner.os == 'Linux'
      run: |
        echo "CUDA_PATH: $CUDA_PATH"
        echo "CUDNN_PATH: $CUDNN_PATH"
        nvcc --version
        # Check cuDNN
        find /usr -name "libcudnn*" 2>/dev/null | head -5
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --all --check

  clippy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install CUDA 12.8 and cuDNN 9 via apt (Linux only)
      if: runner.os == 'Linux'
      run: |
        # Add NVIDIA's repository
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
        sudo dpkg -i cuda-keyring_1.0-1_all.deb
        sudo apt-get update
        
        # Install CUDA 12.8
        sudo apt-get install -y cuda-toolkit-12-8 cuda-runtime-12-8
        
        # Install cuDNN 9
        sudo apt-get install -y libcudnn9-dev libcudnn9-cuda-12
        
    - name: Set up environment variables
      if: runner.os == 'Linux'
      run: |
        echo "CUDA_PATH=/usr/local/cuda-12.8" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CUDNN_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "PATH=/usr/local/cuda-12.8/bin:$PATH" >> $GITHUB_ENV
        
    - name: Verify installations
      if: runner.os == 'Linux'
      run: |
        echo "CUDA_PATH: $CUDA_PATH"
        echo "CUDNN_PATH: $CUDNN_PATH"
        nvcc --version
        # Check cuDNN
        find /usr -name "libcudnn*" 2>/dev/null | head -5
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: clippy
    - name: Check clippy
      run: cargo clippy --all-targets -- -D warnings

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install CUDA 12.8 and cuDNN 9 via apt (Linux only)
        if: runner.os == 'Linux'
        run: |
          # Add NVIDIA's repository
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          
          # Install CUDA 12.8
          sudo apt-get install -y cuda-toolkit-12-8 cuda-runtime-12-8
          
          # Install cuDNN 9
          sudo apt-get install -y libcudnn9-dev libcudnn9-cuda-12
          
      - name: Set up environment variables
        if: runner.os == 'Linux'
        run: |
          echo "CUDA_PATH=/usr/local/cuda-12.8" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CUDNN_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda-12.8/bin:$PATH" >> $GITHUB_ENV
          
      - name: Verify installations
        if: runner.os == 'Linux'
        run: |
          echo "CUDA_PATH: $CUDA_PATH"
          echo "CUDNN_PATH: $CUDNN_PATH"
          nvcc --version
          # Check cuDNN
          find /usr -name "libcudnn*" 2>/dev/null | head -5
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace

  installer:
    name: windows-installer
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      run: python -m pip install flatbuffers numpy mypy pytest setuptools wheel onnx protobuf sympy psutil onnxscript

    - name: Build release
      run: cargo build --release

    - name: Install cargo-packager and NSIS
      shell: bash
      run: |
        cargo install cargo-packager
        # Install NSIS
        choco install nsis -y
        # Add NSIS to PATH for current session
        echo "C:/Program Files (x86)/NSIS" >> $GITHUB_PATH

    - name: Test Windows installer build
      shell: bash
      run: |
        # Build the NSIS installer to ensure it doesn't break
        cargo packager --release --formats nsis
        # Verify the installer was created
        ls -la target/release/blue_onyx_*_x64-setup.exe
